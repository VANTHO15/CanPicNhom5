#include <B212H.h>
#include "D:\CCS\i2c_Flex_LCD.c" //https://controlautomaticoeducacion.com/microcontroladores-pic/lcd-i2c-pic/ 
//#include <LDC420.C>
//#include <LCD.C>
//#include "D:\CCS\i2c_Flex_LCD.c"
double SCALE = 72118.4;
unsigned int32 readCount(void) {
  unsigned int32 data;
  unsigned int8 j;
  output_bit(DT1, 1);
  output_bit(SCK, 0);
  data = 0;

  while (input(DT1));
  for (j = 0; j < 24; j++) {
    output_bit(SCK, 1);
    data = data << 1;
    output_bit(SCK, 0);
    if (input(DT1)) {
      data++;
    }
  }
  output_bit(SCK, 1);
  data = data ^ 0x800000;
  output_bit(SCK, 0);
  return data;
}

int32 readAverage(void) {
  unsigned int32 sum = 0;
  for (int k = 0; k < 20; k++) {
    sum = sum + readCount();
  }
  sum = sum / 20;
  return sum;
}

void main() {  
 unsigned int32 read1 = 0, offset = 0;
  float gram = 0;
  offset = readAverage();
//setup_uart(9600);
/*setup_uart(UART_CUNG);


int8 buffer[12];

int i,n; 
int value = 85;
char ch;
char st[64];
putc('*',UART_CUNG);

for(i=0; i<10; i++)

   putc(buffer[i],UART_CUNG);

putc(13);


*/
lcd_init(0x4E,16,2);
lcd_backlight_led(ON); //Enciende la luz de Fondo
// enable_interrupts(GLOBAL);
 //LCD_Clear();
   //lcd_gotoxy(2, 1); 
 //printf(lcd_putc, "B212H");   
  //delay_ms(1000);
 //lcd_gotoxy(9,2 ); 
 //printf(lcd_putc, "Hula");   
 //  delay_ms(1000);
 while (TRUE) {
  read1 = readAverage();
    if (offset >= read1) {
      float val1 = (offset - read1);
      gram = val1;
    } else {
      float val2 = (read1 - offset);
      gram = val2;

    }
    LCD_Clear();
    lcd_gotoxy(2, 1); 
    // printf(lcd_putc, "\f%f", gram / SCALE);
      printf(lcd_putc, "\f%f", gram/20700);
      printf("%f\n\r",gram/20700);

   // delay_ms(2);
 //byte  x,y,z;
output_toggle(led_blink);
//delay_ms(2);
//fprintf(UART_CUNG,"212");
//printf("binh yeu hang nhieu lam moa moa <3\n\r");

//Delay_ms(11);
///printf("hang\n\r");

//printf("%2u %X %4X\n\r",x,y,z);

//printf(LCD_PUTC, "n=%u",n);
 /*LCD_Clear();
     lcd_gotoxy(3, 1);        
   printf(lcd_putc, " Duc Binh");
 /* read a single character */
/*ch = fgetc(UART_CUNG);
fputc(ch,UART_CUNG);
fputc(fgetc(UART_CUNG));
if(ch)
{

printf(lcd_putc, "di nhau de");
fputc('*',UART_CUNG);

for(i=0; i<10; i++)

   fputc(buffer[i],UART_CUNG);

fputc(13,UART_CUNG);
}*/
/* echo back the received character */
//fputc(ch,UART_CUNG);
  //kitu=getc();
 /*if(ch=="1")
 {
     
 lcd_clear();
        lcd_gotoxy(2, 1);        
   printf(lcd_putc, "di nhau de");
 }
      //  sprintf(lcd_putc,"Ki Tu Nhap: %c \n",kitu);
 if(ch=="2")
 {
     
 lcd_clear();
        lcd_gotoxy(2, 2);        
   printf(lcd_putc, "nhanh nao");
 }
       // LCD_Puts(str);
 
 
      delay_ms(12);
      */
   }    
}
/* I2C_LCD code test 
 lcd_clear();  //Limpia el LCD

   // Envio de Strings al LCD usando la función printf
   printf(lcd_putc, "\fSuscribete a"); 
   delay_ms(1000); 
   printf(lcd_putc, "\nControl      "); 
   delay_ms(1000); 
   printf(lcd_putc, "\nAutomatico    "); 
   delay_ms(1000); 
   printf(lcd_putc, "\nEducacion     "); 
   delay_ms(1000); 

   printf(lcd_putc, "\fAprende:"); 
   delay_ms(1000); 
   printf(lcd_putc, "\n- PIC"); 
   delay_ms(1000); 
   printf(lcd_putc, "\n- Arduino"); 
   delay_ms(1000); 
   printf(lcd_putc, "\n- Control"); 
   delay_ms(1000); 

   // Limpia el LCD 
   printf(lcd_putc, "\f"); 
   delay_ms(500); 

   //Función: lcd_gotoxy()
   //Si colocan un gotoxy mayor al del LCD usado, la propia función
   //internamente coloca los límites correctos. A modo de ejemplo
   //coloquemos las esquinas correspondientes a un LCD 20x4 y la función
   //Loa adaptará si se usa un LCD 16x2

   lcd_gotoxy(3, 1);        
   printf(lcd_putc, "Numeros en");    
   lcd_gotoxy(4, 2);        
   printf(lcd_putc, "Esquinas"); 
   delay_ms(500); 
   lcd_gotoxy(1, 1);        
   printf(lcd_putc, "1"); 
   delay_ms(500); 
   lcd_gotoxy(20, 1);        
   printf(lcd_putc, "2"); 
   delay_ms(500); 
   lcd_gotoxy(20, 4);        
   printf(lcd_putc, "3"); 
   delay_ms(500); 
   lcd_gotoxy(1, 4);        
   printf(lcd_putc, "4");    
   delay_ms(2000); 
   

   // Prueba de la función de borrado Backspace
   printf(lcd_putc, "\f ¡Suscribete!\n"); 
   printf(lcd_putc,   "Activa: CAMPANA"); 
   delay_ms(2000); 

   // Ultima columna y fila  2
   //Borro la fila 2 con back space
   lcd_gotoxy(20, 2);        

   // Backspace over 2nd line. 
   for(i = 0; i < lcd_total_columns; i++) 
      { 
       printf(lcd_putc," \b\b"); 
       delay_ms(100); 
      } 

   printf(lcd_putc,   " es GRATIS!!!!!!");  
   delay_ms(3000); 

//Apaga Luz de Fondo 
         lcd_backlight_led(OFF); 
         printf(LCD_PUTC,"\fLCD BackLight\n     OFF      "); 
         delay_ms(3000); 

//Enciende Luz de Fondo
         lcd_backlight_led(ON); 
         printf(LCD_PUTC,"\fLCD BackLight\n     ON      ");  
         delay_ms(3000); 
*/
//////////////
/* RS232 code example
#use rs232(FORCE_SW,baud=4800,parity=N,xmit=PIN_B3,rcv=PIN_B4,bits=8,stream=UART_MEM,errors)
#use rs232(UART1,baud=9600,parity=N,stream=UART_CUNG,errors)
#include <string.h>
char c ,d;
int i=20;
char x='A';
char chuoi[]="Xin chao";
void xuat(VOID)
{
 fputc ('C', UART_CUNG);
 fputc (13, UART_CUNG);
 fputs ("Huong dan giao tiep rs 232Cung", UART_CUNG) ;
 delay_ms (1000);
}
void xuat2(VOID)
{
 fputc ('M',UART_MEM);
 fputc (13,UART_MEM);
 fputs ("Xuat gia tri ra cong RS232 Mem", UART_MEM) ;
 delay_ms (1000);
}
void test_doc(VOID)
{
 c = fgetc (UART_CUNG) ;
 IF (c == 'a')
 {
 output_high (PIN_D0);
 }
 ELSE
 {
 output_low (PIN_D0);
 }
 d = getc ();
 IF (c == 'b')
 {
 output_high (PIN_D1);
 }
 ELSE
 {
 output_low (PIN_D1);
 }
}
void main()
{
 setup_timer_3 (T3_DISABLED|T3_DIV_BY_1);
 WHILE (TRUE)
 {
 // fprintf(UART_CUNG,"Chuoi xuat boi-frintf-\n\r");
 // fprintf(UART_MEM,"Chuoi xuat boi\"frintf\"\n\r");
 // delay_ms(1000);
 fprintf(UART_CUNG,"CUNG_Gia tri cua i=%u \n\r",i);
 fprintf(UART_MEM,"MEM_Gia tri cua x =%c \n\r",x);
 fputc ('D',UART_MEM);
 //fprintf(UART_CUNG,"CUNG_Gia tri cua x=%c \n\r",chuoi[4]);
 fprintf(UART_MEM,"MEM_Gia tri cua chuoi =%s \n\r",chuoi);
 delay_ms(1000);
 }
}
*/
/*#define HX711_CLK pin_B3
#define HX711_DAT pin_B2

unsigned int32 Get_Load_Cell_Values()
{

unsigned int32 Count;
unsigned char i;
signed int32 Count_C;

Output_low(HX711_CLK);
Count=0;

while(Input(HX711_DAT));
for (i=0;i<24;i++)
{

Output_High(HX711_CLK);

Count=Count<<1;
Output_low(HX711_CLK);

if(Input(HX711_DAT)) Count++;
}
Output_High(HX711_CLK);
Count=Count^0x800000;

Output_Low(HX711_CLK);


return(Count);


} // end of function
*/

 //
//double SCALE = 72118.4;
//double SCALE = 36;


